import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs";
import path from "path";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";

// Simple CSS concatenation function
function buildCSS() {
  // Get all CSS files in the styles directory
  const stylesDir = "./styles";
  const cssFiles = fs
    .readdirSync(stylesDir)
    .filter((file) => file.endsWith(".css"))
    .map((file) => path.join(stylesDir, file))
    .sort(); // Sort for consistent ordering

  let combinedCSS = "";
  cssFiles.forEach((file) => {
    if (fs.existsSync(file)) {
      combinedCSS += fs.readFileSync(file, "utf8") + "\n";
    }
  });

  fs.writeFileSync("./styles.css", combinedCSS);
  console.log(`CSS compiled successfully! (${cssFiles.length} files)`);
}

const context = await esbuild.context({
  banner: {
    js: banner,
  },
  entryPoints: ["src/main.tsx"],
  bundle: true,
  external: [
    "obsidian",
    "electron",
    "@codemirror/autocomplete",
    "@codemirror/collab",
    "@codemirror/commands",
    "@codemirror/language",
    "@codemirror/lint",
    "@codemirror/search",
    "@codemirror/state",
    "@codemirror/view",
    "@lezer/common",
    "@lezer/highlight",
    "@lezer/lr",
    ...builtins,
  ],
  format: "cjs",
  target: "es2018",
  logLevel: "info",
  sourcemap: prod ? false : "inline",
  treeShaking: true,
  outdir: ".",
  entryNames: "[name]",
});

// Build CSS
buildCSS();

if (prod) {
  await context.rebuild();
  process.exit(0);
} else {
  await context.watch();

  // Watch CSS files for changes
  const chokidar = await import("chokidar");

  const watcher = chokidar.watch("./styles", {
    ignored: /(^|[\/\\])\../, // ignore dotfiles
    persistent: true,
    ignoreInitial: true,
  });

  watcher.on("change", (path) => {
    if (path.endsWith(".css")) {
      console.log(`CSS file changed: ${path}`);
      buildCSS();
    }
  });

  watcher.on("add", (path) => {
    if (path.endsWith(".css")) {
      console.log(`CSS file added: ${path}`);
      buildCSS();
    }
  });

  watcher.on("error", (error) => {
    console.error("CSS watcher error:", error);
  });

  console.log("CSS watcher started for ./styles directory");
}
